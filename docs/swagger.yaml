basePath: /api/v1
definitions:
  models.AccountInfo:
    properties:
      acc_id:
        type: integer
      citizen_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  models.AccountInfoUpdateRequest:
    properties:
      field:
        description: '"password", "email", "phone", "citizen_id" are possible choices'
        type: string
      new_value:
        type: string
      password:
        type: string
    type: object
  models.AccountRecoverConfirmRequest:
    properties:
      citizen_id:
        type: string
      otp:
        type: string
    type: object
  models.AccountRecoverConfirmResponse:
    properties:
      token:
        type: string
    type: object
  models.AccountRecoverRequest:
    properties:
      citizen_id:
        type: string
      email:
        type: string
    type: object
  models.AccountRegistrationRequest:
    properties:
      citizen_id:
        type: string
      email:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  models.AccountRegistrationResponse:
    properties:
      acc_id:
        description: Account ID (-1 means account is not registered yet)
        type: integer
      token:
        description: JWT token. If acc ID = -1, token will allow user to register
          new account, otherwise token will allow user to add new patient or staff
        type: string
    type: object
  models.ContactInfo:
    properties:
      acc_id:
        type: integer
      full_name:
        type: string
      role:
        type: string
    type: object
  models.DiagnosisInfo:
    properties:
      description:
        type: string
      icd_code:
        type: string
      name:
        type: string
    type: object
  models.InitRegistrationRequest:
    properties:
      citizen_id:
        type: string
    type: object
  models.LoginRequest:
    properties:
      id:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.MedicalRecordType:
    properties:
      type_id:
        type: string
      type_name:
        type: string
    type: object
  models.MedicationInfo:
    properties:
      generic_name:
        type: string
      manufacturer:
        type: string
      med_id:
        type: integer
      med_type:
        type: string
      name:
        type: string
      route_of_administration:
        type: string
      strength:
        type: string
    type: object
  models.Message:
    properties:
      content:
        type: string
      sender_id:
        type: integer
      sent_at:
        type: string
    type: object
  models.NewMedicalRecordRequest:
    properties:
      patient_id:
        type: integer
      record_detail:
        type: object
      type_id:
        type: string
    type: object
  models.NewPrescriptionRequest:
    properties:
      details:
        items:
          $ref: '#/definitions/models.PrescriptionDetail'
        type: array
      is_insurance_covered:
        type: boolean
      prescription_note:
        type: string
      record_id:
        type: integer
    type: object
  models.PasswordResetRequest:
    properties:
      new_password:
        type: string
    type: object
  models.PatientBriefInfo:
    properties:
      date_of_birth:
        type: string
      full_name:
        type: string
      gender:
        type: string
      patient_id:
        type: integer
    type: object
  models.PatientInfo:
    properties:
      address:
        type: string
      date_of_birth:
        type: string
      emergency_contact_info:
        type: string
      ethnicity:
        type: string
      full_name:
        type: string
      gender:
        type: string
      health_insurance_expired_date:
        type: string
      health_insurance_number:
        type: string
      nationality:
        type: string
      patient_id:
        type: integer
    type: object
  models.PatientInfoUpdateRequest:
    properties:
      address:
        type: string
      date_of_birth:
        type: string
      emergency_contact_info:
        type: string
      ethnicity:
        type: string
      full_name:
        type: string
      gender:
        type: string
      health_insurance_expired_date:
        type: string
      health_insurance_number:
        type: string
      nationality:
        type: string
    type: object
  models.PatientRegistrationRequest:
    properties:
      acc_id:
        type: integer
      address:
        type: string
      date_of_birth:
        type: string
      emergency_contact_info:
        type: string
      ethnicity:
        type: string
      full_name:
        type: string
      gender:
        type: string
      health_insurance_expired_date:
        type: string
      health_insurance_number:
        type: string
      nationality:
        type: string
    type: object
  models.PrescriptionDetail:
    properties:
      afternoon_dosage:
        type: number
      dosage_unit:
        type: string
      duration_days:
        type: integer
      evening_dosage:
        type: number
      instructions:
        type: string
      med_id:
        type: integer
      morning_dosage:
        type: number
      total_dosage:
        type: number
    type: object
  models.PrescriptionDetailInfo:
    properties:
      afternoon_dosage:
        type: number
      detail_id:
        type: integer
      dosage_unit:
        type: string
      duration_days:
        type: integer
      evening_dosage:
        type: number
      instructions:
        type: string
      med_id:
        type: integer
      morning_dosage:
        type: number
      total_dosage:
        type: number
    type: object
  models.PrescriptionInfo:
    properties:
      created_at:
        type: string
      is_insurance_covered:
        type: boolean
      prescription_id:
        type: integer
      prescription_note:
        type: string
      received_at:
        type: string
      record_id:
        type: integer
    type: object
  models.PrescriptionUpdateRequest:
    properties:
      details:
        items:
          $ref: '#/definitions/models.PrescriptionDetailInfo'
        type: array
      is_insurance_covered:
        type: boolean
      prescription_note:
        type: string
    type: object
  models.ScheduleBookingRequest:
    properties:
      examination_date:
        type: string
      type:
        description: 'Type of examination (1: Regular, 2: Service)'
        enum:
        - 1
        - 2
        type: integer
    type: object
  models.ScheduleBookingResponse:
    properties:
      examination_date:
        type: string
      expected_reception_time:
        type: string
      queue_number:
        type: integer
      status:
        description: 'Status of the schedule (1: Waiting, 2: Completed, 3: Cancelled)'
        enum:
        - 1
        - 2
        - 3
        type: integer
      type:
        description: 'Type of examination (1: Regular, 2: Service)'
        enum:
        - 1
        - 2
        type: integer
    type: object
  models.ScheduleInfo:
    properties:
      examination_date:
        type: string
      expected_reception_time:
        type: string
      queue_number:
        type: integer
      schedule_id:
        type: integer
      status:
        description: 'Status of the schedule (1: Waiting, 2: Completed, 3: Cancelled)'
        enum:
        - 1
        - 2
        - 3
        type: integer
      type:
        description: 'Type of examination (1: Regular, 2: Service)'
        enum:
        - 1
        - 2
        type: integer
    type: object
  models.SendingMessage:
    properties:
      content:
        type: string
      to_acc_id:
        type: integer
    type: object
  models.StaffInfo:
    properties:
      date_of_birth:
        type: string
      department:
        type: string
      full_name:
        type: string
      gender:
        type: string
      staff_id:
        type: integer
    type: object
  models.StaffInfoUpdateRequest:
    properties:
      date_of_birth:
        type: string
      department:
        type: string
      full_name:
        type: string
      gender:
        type: string
    type: object
  models.StaffRegistrationRequest:
    properties:
      acc_id:
        type: integer
      date_of_birth:
        type: string
      department:
        type: string
      full_name:
        type: string
      gender:
        type: string
    type: object
  models.UpdateScheduleStatusRequest:
    properties:
      new_status:
        description: 'New status of the schedule (1: Waiting, 2: Completed, 3: Cancelled)'
        type: integer
      reception_time:
        type: string
      schedule_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for medical records management app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: MeReMa Server API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: API for admin to get account list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get account list (admin)
      tags:
      - accounts
  /accounts/login:
    post:
      consumes:
      - application/json
      description: API for user to login
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - accounts
  /accounts/profile:
    get:
      consumes:
      - application/json
      description: API for user to get account info
      produces:
      - application/json
      responses:
        "200":
          description: 'account_info: models.AccountInfo, additional_info: []models.PatientBriefInfo
            or models.StaffInfo'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get account info
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: Update account information such as citizen ID, phone, email, or
        password
      parameters:
      - description: Account information to update
        in: body
        name: AccountInfoUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/models.AccountInfoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update Account Info
      tags:
      - accounts
  /accounts/recovery:
    post:
      consumes:
      - application/json
      description: Send recovery email to user
      parameters:
      - description: Recovery credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.AccountRecoverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get important info to send recovery email
      tags:
      - accounts
  /accounts/recovery/reset:
    put:
      consumes:
      - application/json
      description: Reset password after OTP verification
      parameters:
      - description: Password reset request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Reset password
      tags:
      - accounts
  /accounts/recovery/verify:
    post:
      consumes:
      - application/json
      description: Confirm recovery OTP
      parameters:
      - description: Recovery OTP
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.AccountRecoverConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountRecoverConfirmResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Confirm recovery OTP
      tags:
      - accounts
  /accounts/register:
    post:
      consumes:
      - application/json
      description: Check whether the citizen ID is already registered
      parameters:
      - description: Initiate registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.InitRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountRegistrationResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Initiate registration (admin, receptionist)
      tags:
      - accounts
  /accounts/register/create:
    post:
      consumes:
      - application/json
      description: Create a new account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.AccountRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AccountRegistrationResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Register new account (admin, receptionist)
      tags:
      - accounts
  /accounts/register/patients:
    post:
      consumes:
      - application/json
      description: Create a new patient account
      parameters:
      - description: Patient registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PatientRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Register new patient (receptionist)
      tags:
      - accounts
  /accounts/register/staffs:
    post:
      consumes:
      - application/json
      description: Create a new staff account
      parameters:
      - description: Staff registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.StaffRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Register new staff (admin)
      tags:
      - accounts
  /catalog/diagnoses:
    get:
      consumes:
      - application/json
      description: Get a list of diagnoses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DiagnosisInfo'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Diagnosis List (doctor)
      tags:
      - catalogs
  /catalog/diagnoses/{icd_code}:
    get:
      consumes:
      - application/json
      description: Get info of a diagnosis
      parameters:
      - description: ICD Code
        in: path
        name: icd_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiagnosisInfo'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Diagnosis Info (doctor, patient)
      tags:
      - catalogs
  /catalog/medications:
    get:
      consumes:
      - application/json
      description: Get a list of medications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MedicationInfo'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Medication List (doctor)
      tags:
      - catalogs
  /catalog/medications/{medication_id}:
    get:
      consumes:
      - application/json
      description: Get info of a medication
      parameters:
      - description: Medication ID
        in: path
        name: medication_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MedicationInfo'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Medication Info (doctor, patient)
      tags:
      - catalogs
  /catalog/record-types:
    get:
      consumes:
      - application/json
      description: Get a list of medical record types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MedicalRecordType'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Medical Record Type List (doctor)
      tags:
      - catalogs
  /catalog/record-types/{type_id}/template:
    get:
      consumes:
      - application/json
      description: Get a medical record template by type ID
      parameters:
      - description: Medical Record Type ID  (01BV1, 02BV1, ...)
        in: path
        name: type_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Medical Record Template (doctor)
      tags:
      - catalogs
  /comms/contacts:
    get:
      consumes:
      - application/json
      description: Get contact list for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContactInfo'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get contact list (doctor, patient)
      tags:
      - communications
  /comms/messages:
    post:
      consumes:
      - application/json
      description: Send message to a doctor or patient
      parameters:
      - description: Message to send
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.SendingMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Send message (patient, doctor)
      tags:
      - communications
  /comms/messages/{contact_id}:
    get:
      consumes:
      - application/json
      description: Load conversation with a doctor or patient
      parameters:
      - description: Contact ID
        in: path
        name: contact_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Load conversation (patient, doctor)
      tags:
      - communications
  /patients:
    get:
      consumes:
      - application/json
      description: Get patient list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PatientBriefInfo'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get patient list (receptionist, doctor)
      tags:
      - patients
  /patients/{patient_id}:
    get:
      consumes:
      - application/json
      description: Get patient info
      parameters:
      - description: Patient ID
        in: path
        name: patient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PatientInfo'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get patient info (receptionist, doctor, patient)
      tags:
      - patients
    put:
      consumes:
      - application/json
      description: Update patient info
      parameters:
      - description: Patient ID
        in: path
        name: patient_id
        required: true
        type: string
      - description: Patient Info Update Request
        in: body
        name: patient_info
        required: true
        schema:
          $ref: '#/definitions/models.PatientInfoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update patient info (doctor, receptionist)
      tags:
      - patients
  /prescriptions:
    post:
      consumes:
      - application/json
      description: Add a new prescription for a patient record
      parameters:
      - description: Add New Prescription Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NewPrescriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Add New Prescription (doctor)
      tags:
      - prescriptions
  /prescriptions/{prescription_id}:
    get:
      consumes:
      - application/json
      description: Get prescription details by ID
      parameters:
      - description: Prescription ID
        in: path
        name: prescription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PrescriptionDetailInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get prescription details (doctor, patient)
      tags:
      - prescriptions
    put:
      consumes:
      - application/json
      description: Update prescription
      parameters:
      - description: Prescription ID
        in: path
        name: prescription_id
        required: true
        type: string
      - description: Prescription Update Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.PrescriptionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update prescription (doctor)
      tags:
      - prescriptions
  /prescriptions/{prescription_id}/confirm:
    put:
      consumes:
      - application/json
      description: Confirm that the prescription has been received
      parameters:
      - description: Prescription ID
        in: path
        name: prescription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Confirm receiving prescription (receptionist)
      tags:
      - prescriptions
  /prescriptions/patients/{patient_id}:
    get:
      consumes:
      - application/json
      description: Get prescription list
      parameters:
      - description: Patient ID
        in: path
        name: patient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PrescriptionInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get prescription list with patient ID (doctor, patient)
      tags:
      - prescriptions
  /prescriptions/records/{record_id}:
    get:
      consumes:
      - application/json
      description: Get prescription list
      parameters:
      - description: Medical Record ID
        in: path
        name: record_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PrescriptionInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get prescription list with medical record ID (doctor, patient)
      tags:
      - prescriptions
  /records:
    post:
      consumes:
      - application/json
      description: Add a new record for a patient
      parameters:
      - description: New Medical Record Request
        in: body
        name: NewMedicalRecordRequest
        required: true
        schema:
          $ref: '#/definitions/models.NewMedicalRecordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Add a new record (doctor)
      tags:
      - records
  /schedules:
    get:
      consumes:
      - application/json
      description: Get Schedule List
      parameters:
      - collectionFormat: csv
        description: 'Type of examination (1: Regular, 2: Service). Ex: ?type[]=1&type[]=2'
        in: query
        items:
          type: integer
        name: type[]
        type: array
      - collectionFormat: csv
        description: 'Status of the schedule (1: Waiting, 2: Completed, 3: Cancelled.
          Ex: ?status[]=1&status[]=2'
        in: query
        items:
          type: integer
        name: status[]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScheduleInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Schedule List (patient, receptionist)
      tags:
      - schedules
  /schedules/book:
    post:
      consumes:
      - application/json
      description: Book Examination Schedule
      parameters:
      - description: Schedule Booking Request
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/models.ScheduleBookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ScheduleBookingResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Book Examination Schedule (patient)
      tags:
      - schedules
  /schedules/update-status:
    put:
      consumes:
      - application/json
      description: Update schedule status from waiting to completed or cancelled
      parameters:
      - description: Update schedule status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateScheduleStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update schedule status (receptionist)
      tags:
      - schedules
  /staffs:
    get:
      consumes:
      - application/json
      description: Get staff list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StaffInfo'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get staff list (admin)
      tags:
      - staffs
  /staffs/{staff_id}:
    get:
      consumes:
      - application/json
      description: Get staff info
      parameters:
      - description: Staff ID
        in: path
        name: staff_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StaffInfo'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get staff info (primary for admin; doctor, receptionist will only get
        their own info for whichever staff_id they set)
      tags:
      - staffs
    put:
      consumes:
      - application/json
      description: Update staff information by staff ID
      parameters:
      - description: Staff ID
        in: path
        name: staff_id
        required: true
        type: string
      - description: Staff info update request
        in: body
        name: StaffInfoUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/models.StaffInfoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update staff info (admin)
      tags:
      - staffs
securityDefinitions:
  BearerAuth:
    description: Provide the JWT token as a header with format "Bearer \<token\>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
